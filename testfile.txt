const int SIZE = 5, MAX_NUM = 10;
int global_arr[3] = {1, 2, 3};
int counter = 0;

int side_effect() {
    counter = counter + 1;
    return 1;
}

int get_array_sum(int arr[], int len) {
    int sum = 0;
    int i;
    for (i = 0; i < len; i = i + 1) {
        sum = sum + arr[i];
    }
    return sum;
}

void modify_array(int arr[]) {
    arr[0] = arr[0] * 2;
    arr[1] = arr[1] + 10;
}

void empty_func() {
}

int test_complex_condition(int x) {
    if (x > 0 && x < 50) {
        return 1;
    }
    if (x >= 50 || x <= 0) {
        return 0;
    }
    return -1;
}

void test_unary_ops() {
    int temp = 5;
    int pos = +temp;
    int neg = -temp;
    counter = counter + pos + neg;
}

int main() {
    printf("23371387\n");

    int local_arr[4] = {10, 20, 30, 40};
    printf("local_arr: %d %d %d %d\n", local_arr[0], local_arr[1], local_arr[2], local_arr[3]);

    int sum1 = get_array_sum(local_arr, 4);
    printf("sum of local_arr: %d\n", sum1);

    int sum2 = get_array_sum(global_arr, 3);
    printf("sum of global_arr: %d\n", sum2);

    modify_array(global_arr);
    printf("modified global_arr: %d %d %d\n", global_arr[0], global_arr[1], global_arr[2]);

    if (0 && side_effect()) {
        counter = 100;
    }
    printf("counter after 0&&: %d\n", counter);

    if (1 || side_effect()) {
        counter = 200;
    }
    printf("counter after 1||: %d\n", counter);

    test_unary_ops();
    printf("after unary ops: %d\n", counter);

    int x = getint();
    int condition_result = test_complex_condition(x);
    printf("condition result: %d\n", condition_result);

    printf("test completed\n");

    return 0;
}