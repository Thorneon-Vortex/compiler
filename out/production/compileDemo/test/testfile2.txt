const int MAX_SIZE = 4, MIN_SIZE = 2;
int matrix[4] = {1, 4, 9, 16};
int empty_arr[3];

void increment_static() {
    static int static_count = 0,local_static = 0;
    local_static = local_static + 1;
    static_count = static_count + local_static;
   printf("static_count: %d\n", static_count);
}

int factorial(int n) {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

void process_array(int arr[], int size) {
    int i;
    for (i = 0; i < size; i = i + 1) {
        arr[i] = factorial(i + 1);
    }
}

int multi_param_func(int a, int b, int c) {
    return a + b + c;
}

void init_empty_array() {
    empty_arr[0] = 100;
    empty_arr[1] = 200;
    empty_arr[2] = 300;
}

void test_array_operations(int arr[], int size) {
    int i;
    for (i = 0; i < size; i = i + 1) {
        arr[i] = arr[i] + i;
    }
}

void test_const_array_init() {
    const int temp_const[3] = {10, 20, 30};
    printf("const array: %d %d %d\n", temp_const[0], temp_const[1], temp_const[2]);
}

int main() {
    printf("23371387\n");
    
    increment_static();
    increment_static();
    
    
    printf("matrix: %d %d %d %d\n", matrix[0], matrix[1], matrix[2], matrix[3]);
    
    init_empty_array();
    printf("empty_arr: %d %d %d\n", empty_arr[0], empty_arr[1], empty_arr[2]);
    
    int local_data[3] = {5, 10, 15};
    process_array(local_data, 3);
    printf("processed: %d %d %d\n", local_data[0], local_data[1], local_data[2]);
    
    test_const_array_init();
    
    int sum = 0;
    int j;
    for (j = 0; j < MAX_SIZE; j = j + 1) {
        sum = sum + matrix[j];
    }
    printf("matrix sum: %d\n", sum);
    
    test_array_operations(matrix, MAX_SIZE);
    printf("modified matrix: %d %d %d %d\n", matrix[0], matrix[1], matrix[2], matrix[3]);
    
    int multi_result = multi_param_func(1, 2, 3);
    printf("multi param: %d\n", multi_result);
    
    printf("B level test finished\n");
    
    return 0;
}